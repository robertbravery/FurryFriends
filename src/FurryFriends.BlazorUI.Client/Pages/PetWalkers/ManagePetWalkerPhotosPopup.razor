@namespace FurryFriends.BlazorUI.Client.Pages.PetWalkers
@using FurryFriends.BlazorUI.Client.Models.PetWalkers
@using FurryFriends.BlazorUI.Client.Models.Picture.Enums
@using FurryFriends.BlazorUI.Client.Services.Interfaces
@using FurryFriends.BlazorUI.Client.Services
@using Microsoft.AspNetCore.Components.Forms
@using FurryFriends.BlazorUI.Client.Models
@using FurryFriends.BlazorUI.Client.Models.Picture
@using Microsoft.Extensions.Logging
@inject IPopupService PopupService
@inject IPictureService PictureService
@inject IConfiguration Configuration
@inject ILogger<ManagePetWalkerPhotosPopup> Logger
@rendermode InteractiveAuto

@implements IDisposable

@if (isVisible)
{
    <div class="modal-backdrop">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header modal-header-background">
                    <h5 class="modal-title">Manage Photos for @(petWalkerPictures?.PetwalkerName ?? "Pet Walker")</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="ClosePopup"></button>
                </div>
                <div class="modal-body">
                    @if (isLoading)
                    {
                        <p><em>Loading photo information...</em></p>
                    }
                    else if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">@errorMessage</div>
                    }
                    else if (petWalkerPictures != null)
                    {
                        <div class="row">
                            @* Bio Picture Section *@
                            <div class="col-md-4">
                                <div class="bio-picture-section">
                                    <h4>Bio Picture</h4>
                                    <div class="mb-3 text-center">
                                        @{
                                            string bioPicUrl = petWalkerPictures.ProfilePicture != null && !string.IsNullOrEmpty(petWalkerPictures.ProfilePicture.Url)
                                                ? GetFullPhotoUrl(petWalkerPictures.ProfilePicture.Url) // Use helper
                                                : $"https://placehold.co/200x200/e9ecef/495057?text=Bio";
                                        }
                                        <div class="bio-image-container">
                                            <img src="@bioPicUrl" alt="Bio Picture" class="img-thumbnail mb-2" />
                                        </div>
                                        @if (bioPicturePreviewUrl != null) {
                                            <div class="bio-preview-container">
                                                <img src="@bioPicturePreviewUrl" alt="New Bio Pic Preview" class="img-thumbnail mb-2" />
                                            </div>
                                        }
                                    </div>
                                    <InputFile OnChange="HandleBioPictureSelected" accept="image/*" class="form-control mb-2" />
                                    <button class="btn btn-primary w-100" @onclick="UploadBioPicture" disabled="@(selectedBioPictureFile == null || isUploadingBioPic)">
                                        @(isUploadingBioPic ? "Uploading..." : "Update Bio Picture")
                                    </button>
                                    @if (!string.IsNullOrEmpty(bioPicUploadStatus)) { <p class="mt-2">@bioPicUploadStatus</p> }
                                </div>
                            </div>

                            @* Gallery Photos Section *@
                            <div class="col-md-8">
                                <div class="gallery-section">
                                    <h4>Gallery Photos</h4>
                                    <div class="upload-section mb-4">
                                        <InputFile OnChange="HandleGalleryPhotosSelected" multiple accept="image/*" class="form-control mb-2" />
                                        @* Previews for new gallery photos *@
                                        @if (galleryPhotoPreviews.Any())
                                        {
                                            <div class="preview-container mb-2">
                                                @foreach(var preview in galleryPhotoPreviews)
                                                {
                                                    <div class="preview-item">
                                                        <img src="@preview.Url" title="@preview.Name" />
                                                    </div>
                                                }
                                            </div>
                                        }
                                        <button class="btn btn-success w-100" @onclick="UploadGalleryPhotos" disabled="@(!selectedGalleryFiles.Any() || isUploadingGallery)">
                                            @(isUploadingGallery ? "Uploading..." : $"Upload {selectedGalleryFiles.Count} New Photo(s)")
                                        </button>
                                        @if (!string.IsNullOrEmpty(galleryUploadStatus)) { <p class="status-message">@galleryUploadStatus</p> }
                                    </div>

                                    <div class="existing-photos-section">
                                        <h5>Existing Photos</h5>
                                        @if (petWalkerPictures?.Photos != null && petWalkerPictures.Photos.Any(p => p.PhotoType != PhotoType.BioPic)) // Filter out bio pic if it's in this list
                                        {
                                            <div class="photos-gallery">
                                                @foreach (var photo in petWalkerPictures.Photos.Where(p => p.PhotoType != PhotoType.BioPic))
                                                {
                                                    <div class="position-relative">
                                                        <img src="@GetFullPhotoUrl(photo.Url)" alt="@(photo.Description ?? "Gallery Photo")" />
                                                        <button class="btn btn-danger btn-sm" title="Delete Photo"
                                                                @onclick="() => DeleteGalleryPhoto(photo.Id)" disabled="@isDeleting">
                                                            &times;
                                                        </button>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <p class="no-photos-message">No gallery photos uploaded yet.</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="ClosePopup">Done</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isVisible = false;
    private bool isLoading = false;
    private bool isUploadingBioPic = false;
    private bool isUploadingGallery = false;
    private bool isDeleting = false;
    private string? errorMessage = null;
    private string? bioPicUploadStatus = null;
    private string? galleryUploadStatus = null;
    private Guid currentPetWalkerId;
	private PictureViewModel? petWalkerPictures; // Use a detailed view model if available
    private string? _photoBaseUrl;

    // Bio Picture State
    private IBrowserFile? selectedBioPictureFile;
    private string? bioPicturePreviewUrl;

    // Gallery Photos State
    private List<IBrowserFile> selectedGalleryFiles = new();
    private List<PhotoPreview> galleryPhotoPreviews = new();

    private class PhotoPreview {
        public string Url { get; set; } = "";
        public string Name { get; set; } = "";
    }

    protected override void OnInitialized()
    {
        PopupService.OnShowManagePetWalkerPhotosPopup += ShowPopup;
        PopupService.OnCloseManagePetWalkerPhotosPopup += ClosePopupInternal;
        _photoBaseUrl = Configuration["PhotoStorage:BaseUrl"]; // Get base URL
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogDebug("ManagePetWalkerPhotosPopup first render completed");
            await Task.CompletedTask;
        }
    }

    private async void ShowPopup(Guid petWalkerId)
    {
        Logger.LogInformation("Opening manage photos popup for pet walker ID: {PetWalkerId}", petWalkerId);
        try
        {
            currentPetWalkerId = petWalkerId;
            Logger.LogDebug("Setting visibility and loading state");
            isVisible = true;
            isLoading = true;
            errorMessage = null;
            petWalkerPictures = null; // Reset
            ResetUploadStates();

            await InvokeAsync(StateHasChanged); // Ensure UI updates immediately

            // Fetch specific pet walker details including photos
            Logger.LogDebug("Fetching pet walker photos for ID: {PetWalkerId}", currentPetWalkerId);
            var response = await PictureService.GetPetWalkerByIdAsync(currentPetWalkerId);

            if (response.Success && response.Data != null)
            {
                petWalkerPictures = response.Data;
                Logger.LogInformation("Successfully loaded pet walker pictures: Name={Name}, ProfilePic={HasProfilePic}, Photos Count={PhotoCount}",
                    petWalkerPictures.PetwalkerName,
                    petWalkerPictures.ProfilePicture != null ? "Present" : "Null",
                    petWalkerPictures.Photos?.Count.ToString() ?? "null");

                // Ensure Photos collection is initialized
                if (petWalkerPictures.Photos == null)
                {
                    Logger.LogWarning("Photos collection was null for pet walker {PetWalkerId}, initializing empty list", petWalkerId);
                    petWalkerPictures.Photos = new List<DetailedPhotoDto>();
                }
            }
            else
            {
                errorMessage = response.Message ?? "Failed to load pet walker data.";
                Logger.LogWarning("Error loading pet walker data for ID {PetWalkerId}: {ErrorMessage}",
                    petWalkerId, errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Logger.LogError(ex, "Exception in ShowPopup for pet walker ID: {PetWalkerId}", petWalkerId);
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged); // Ensure UI updates after loading
        }
    }

    private void ClosePopup()
    {
        PopupService.CloseManagePetWalkerPhotosPopup();
    }

    private void ClosePopupInternal()
    {
        isVisible = false;
        ResetUploadStates();
        petWalkerPictures = null; // Clear data
        StateHasChanged();
    }

     private void ResetUploadStates()
    {
        selectedBioPictureFile = null;
        bioPicturePreviewUrl = null;
        selectedGalleryFiles.Clear();
        galleryPhotoPreviews.Clear();
        bioPicUploadStatus = null;
        galleryUploadStatus = null;
        isUploadingBioPic = false;
        isUploadingGallery = false;
        isDeleting = false;
    }

    // --- Bio Picture Handlers ---
    private async Task HandleBioPictureSelected(InputFileChangeEventArgs e)
    {
        selectedBioPictureFile = e.File;
        bioPicUploadStatus = null; // Clear previous status
        if (selectedBioPictureFile != null)
        {
            // Create preview
            var format = "image/jpeg"; // Or derive from file type
            var imageStream = selectedBioPictureFile.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5MB limit example
            using var ms = new MemoryStream();
            await imageStream.CopyToAsync(ms);
            var buffer = ms.ToArray();
            bioPicturePreviewUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        } else {
            bioPicturePreviewUrl = null;
        }
        StateHasChanged();
    }

    private async Task UploadBioPicture()
    {
        if (selectedBioPictureFile == null || petWalkerPictures == null) return;

        isUploadingBioPic = true;
        bioPicUploadStatus = "Uploading...";
        StateHasChanged();

        try
        {
            // Call the service method - this needs to be created
            var response = await PictureService.UpdateBioPictureAsync(petWalkerPictures.PetWalkerId, selectedBioPictureFile);
            if (response.Success && response.Data != null)
            {
                // Update the local model with the new bio pic URL/data
                petWalkerPictures.ProfilePicture = response.Data;
                bioPicUploadStatus = "Bio picture updated successfully!";
                selectedBioPictureFile = null; // Clear selection
                bioPicturePreviewUrl = null; // Clear preview
            }
            else
            {
                bioPicUploadStatus = $"Error: {response.Message ?? "Upload failed."}";
            }
        }
        catch (Exception ex)
        {
            bioPicUploadStatus = $"Error: {ex.Message}";
        }
        finally
        {
            isUploadingBioPic = false;
            StateHasChanged();
        }
    }

    // --- Gallery Photo Handlers ---
    private async Task HandleGalleryPhotosSelected(InputFileChangeEventArgs e)
    {
        selectedGalleryFiles.Clear();
        galleryPhotoPreviews.Clear();
        galleryUploadStatus = null;

        foreach (var file in e.GetMultipleFiles(maximumFileCount: 10)) // Limit concurrent uploads
        {
             try {
                selectedGalleryFiles.Add(file);
                // Create previews
                var format = "image/jpeg";
                var imageStream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024); // 5MB limit
                using var ms = new MemoryStream();
                await imageStream.CopyToAsync(ms);
                var buffer = ms.ToArray();
                galleryPhotoPreviews.Add(new PhotoPreview { Url = $"data:{format};base64,{Convert.ToBase64String(buffer)}", Name = file.Name });
             } catch (IOException ex) {
                 galleryUploadStatus = $"Error reading {file.Name}: {ex.Message}"; // Handle file size errors etc.
             }
        }
        StateHasChanged();
    }

    private async Task UploadGalleryPhotos()
    {
        if (!selectedGalleryFiles.Any() || petWalkerPictures == null) return;

        isUploadingGallery = true;
        galleryUploadStatus = $"Uploading {selectedGalleryFiles.Count} photos...";
        StateHasChanged();

        try
        {
            // Call the service method - needs to be created
            var response = await PictureService.AddPhotosAsync(petWalkerPictures.PetWalkerId, selectedGalleryFiles);
            if (response.Success && response.Data != null)
            {
                 // Add new photos to the local list
                if (petWalkerPictures.Photos == null) petWalkerPictures.Photos = new List<DetailedPhotoDto >();
                petWalkerPictures.Photos.AddRange(response.Data); // Assuming response returns the newly added photos
                galleryUploadStatus = $"{response.Data.Count} photo(s) uploaded successfully!";
                selectedGalleryFiles.Clear(); // Clear selection
                galleryPhotoPreviews.Clear(); // Clear previews
            }
            else
            {
                galleryUploadStatus = $"Error: {response.Message ?? "Upload failed."}";
            }
        }
        catch (Exception ex)
        {
            galleryUploadStatus = $"Error: {ex.Message}";
        }
        finally
        {
            isUploadingGallery = false;
            StateHasChanged();
        }
    }

     private async Task DeleteGalleryPhoto(Guid photoId)
    {
        if (petWalkerPictures == null) return;

        // Optional: Add a confirmation dialog here

        isDeleting = true;
        galleryUploadStatus = "Deleting photo..."; // Use gallery status for feedback
        StateHasChanged();

        try
        {
            // Call the service method - needs to be created
            var response = await PictureService.DeletePhotoAsync(petWalkerPictures.PetWalkerId, photoId);
            if (response.Success)
            {
                // Remove photo from local list
                petWalkerPictures.Photos?.RemoveAll(p => p.Id == photoId);
                galleryUploadStatus = "Photo deleted successfully!";
            }
            else
            {
                galleryUploadStatus = $"Error: {response.Message ?? "Deletion failed."}";
            }
        }
        catch (Exception ex)
        {
            galleryUploadStatus = $"Error: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }

    // Helper to construct full URL
    private string GetFullPhotoUrl(string relativePath)
    {
        if (string.IsNullOrEmpty(relativePath)) return ""; // Or return placeholder
        if (Uri.TryCreate(relativePath, UriKind.Absolute, out _)) return relativePath; // Already absolute
        if (string.IsNullOrEmpty(_photoBaseUrl)) return relativePath; // No base URL configured

        // Ensure no double slashes
        var baseUrl = _photoBaseUrl.TrimEnd('/');
        var relPath = relativePath.TrimStart('/');
        return $"{baseUrl}/{relPath}";
    }


    public void Dispose()
    {
        PopupService.OnShowManagePetWalkerPhotosPopup -= ShowPopup;
        PopupService.OnCloseManagePetWalkerPhotosPopup -= ClosePopupInternal;
    }
}
