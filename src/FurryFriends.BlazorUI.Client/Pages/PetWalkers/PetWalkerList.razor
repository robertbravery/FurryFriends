@page "/petwalkers"
@rendermode InteractiveAuto
@using FurryFriends.BlazorUI.Client.Models
@using FurryFriends.BlazorUI.Client.Models.PetWalkers
@using FurryFriends.BlazorUI.Client.Models.Common
@using FurryFriends.BlazorUI.Client.Services
@using FurryFriends.BlazorUI.Client.Services.Interfaces

@inject IPetWalkerService PetWalkerService

<div class="petwalker-list-container">
	<div class="petwalker-list-header">
		<div>
			<h1>Petwalker Directory</h1>
			<p>View and manage all the Petwalkers.</p>
		</div>
		<button class="btn btn-primary add-petwalker-btn">
			<span class="add-icon">+</span> Add New Petwalker
		</button>
	</div>

	@if (petWalkers is null)
	{
		<p><em>Loading client list...</em></p>
	}
	else
	{
		<table class="table">
			<thead>
				<tr>
					<th style="background-color:#e9ecef; text-transform:uppercase;">Name</th>
					<th style="background-color:#e9ecef; text-transform:uppercase;">Email</th>
					<th style="background-color:#e9ecef; text-transform:uppercase;">City</th>
					<th style="background-color:#e9ecef; text-transform:uppercase;">Service Areas</th>
					<th style="background-color:#e9ecef; text-transform:uppercase;">Phone Number</th>
					<th style="background-color:#e9ecef; text-transform:uppercase;">Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var petWalker in petWalkers)
				{
					<tr>
						<td>@petWalker.Name</td>
						<td>@petWalker.EmailAddress</td>
						<td>@petWalker.City</td>
						<td>@petWalker.Location</td>
						<td>@petWalker.PhoneNumber</td>
						<td style="display: flex; gap: 10px;">
							<button class="btn btn-link p-0" style="color:brown;">	👁️</button>
							<button class="btn btn-link p-0" style="color:lightcoral;">✏️</button>
						</td>
					</tr>
				}
			</tbody>
		</table>

		<!-- Pagination Controls -->
		<div class="pagination-container">
			<div class="page-size-selector">
				Items per page:
				<select @bind="pageSize" @bind:after="LoadPetWalkers">
					<option value="5">5</option>
					<option value="10">10</option>
					<option value="25">25</option>
					<option value="50">50</option>
				</select>
			</div>
			<div class="pagination-info">
				@GetPaginationInfo()
			</div>
			<div class="pagination-controls">
				<button class="btn btn-sm @(hasPreviousPage ? "btn-outline-primary" : "btn-outline-secondary")"
					@onclick="PreviousPage" disabled="@(!hasPreviousPage)">
					&lt;
				</button>
				<span class="current-page">@currentPage</span>
				<button class="btn btn-sm @(hasNextPage ? "btn-outline-primary" : "btn-outline-secondary")"
					@onclick="NextPage" disabled="@(!hasNextPage)">
					&gt;
				</button>
			</div>
		</div>
	}
</div>

@code {
	private List<PetWalkerDto>? petWalkers;
	private int currentPage = 1;
	private int pageSize = 10;
	private int totalCount = 0;
	private int totalPages = 1;
	private bool hasPreviousPage = false;
	private bool hasNextPage = false;

	protected override async Task OnInitializedAsync()
	{
		await LoadPetWalkers();
	}

	private async Task LoadPetWalkers()
	{
		var response = await PetWalkerService.GetPetWalkersAsync(currentPage, pageSize);

		// Update the component state with data from the response
		petWalkers = response.RowsData;
		totalCount = response.TotalCount;
		totalPages = response.TotalPages;
		hasPreviousPage = response.HasPreviousPage;
		hasNextPage = response.HasNextPage;

		// Use the page number from the response (in case it was adjusted on the server)
		currentPage = response.PageNumber;

		// Ensure current page is valid
		if (currentPage > totalPages && totalPages > 0)
		{
			currentPage = totalPages;
			await LoadPetWalkers();
		}
	}

	private async Task PreviousPage()
	{
		if (hasPreviousPage)
		{
			currentPage--;
			await LoadPetWalkers();
		}
	}

	private async Task NextPage()
	{
		if (hasNextPage)
		{
			currentPage++;
			await LoadPetWalkers();
		}
	}

	private string GetPaginationInfo()
	{
		if (totalCount == 0)
		{
			return "No items";
		}

		var start = (currentPage - 1) * pageSize + 1;
		var end = Math.Min(currentPage * pageSize, totalCount);
		return $"{start} - {end} of {totalCount}";
	}
}
