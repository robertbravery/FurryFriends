@page "/clients"

@rendermode InteractiveAuto
@using FurryFriends.BlazorUI.Client.Models.Clients
@using FurryFriends.BlazorUI.Client.Models.Common
@using FurryFriends.BlazorUI.Client.Services.Interfaces
@using FurryFriends.BlazorUI.Client.Components.Common
@implements IDisposable
@inject IClientService ClientService
@inject IPopupService PopupService

<div class="client-list-container">
    <div class="client-list-header">
        <div>
            <h1>Client Directory</h1>
            <p>View and manage all your clients.</p>
        </div>
        <button class="btn btn-primary add-client-btn" @onclick="OpenCreatePopup">
            <span class="add-icon">+</span> Add New Client
        </button>
    </div>

    @if (clients is null)
    {
        <p><em>Loading client list...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th style="background-color:#e9ecef; text-transform:uppercase;">Name</th>
                    <th style="background-color:#e9ecef; text-transform:uppercase;">Email</th>
                    <th style="background-color:#e9ecef; text-transform:uppercase;">City</th>
                    <th style="background-color:#e9ecef; text-transform:uppercase;">Pets</th>
                    <th style="background-color:#e9ecef; text-transform:uppercase;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var client in clients)
                {
                    <tr style="@(clients.IndexOf(client) % 2 == 0 ? "background-color:#f8f9fa;" : "")">
                        <td>@client.Name</td>
                        <td>@client.EmailAddress</td>
                        <td>@client.City</td>
                        <td>@client.TotalPets</td>
                        <td style="display: flex; gap: 10px;">
                            <button class="btn btn-link p-0" style="color:brown;"
                                @onclick="() => OpenViewPopup(client.EmailAddress)" @onclick:preventDefault @onclick:stopPropagation>üëÅÔ∏è</button>
                            <span style="color:steelblue; cursor:pointer">+üêæ</span>
							<button class="btn btn-link p-0" style="color:lightcoral;"
								@onclick="() => OpenEditPopup(client.EmailAddress)" @onclick:preventDefault @onclick:stopPropagation>‚úèÔ∏è</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    @if (clients is not null)
    {
        <!-- Pagination Controls -->
        <Pagination
            CurrentPage="@currentPage"
            PageSize="@pageSize"
            TotalCount="@totalCount"
            TotalPages="@totalPages"
            HasPreviousPage="@hasPreviousPage"
            HasNextPage="@hasNextPage"
            OnPageChanged="@HandlePageChanged"
            OnPageSizeChanged="@HandlePageSizeChanged" />
    }
</div>

@code {
	private List<ClientDto>? clients { get; set; }
	private int currentPage = 1;
	private int pageSize = 10;
	private int totalCount = 0;
	private int totalPages = 1;
	private bool hasPreviousPage = false;
	private bool hasNextPage = false;

	protected override async Task OnInitializedAsync()
	{
		await LoadClients();

		// Subscribe to the popup close event to refresh data
		SubscribeToEvents();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			// Ensure we're subscribed after the component is rendered
			SubscribeToEvents();
		}
	}

	private void SubscribeToEvents()
	{
		// Unsubscribe first to avoid duplicate subscriptions
		PopupService.OnCloseEditClientPopup -= HandlePopupClosed;
		PopupService.OnCloseViewClientPopup -= HandlePopupClosed;
		PopupService.OnCloseCreateClientPopup -= HandlePopupClosed;

		// Subscribe to events
		PopupService.OnCloseEditClientPopup += HandlePopupClosed;
		PopupService.OnCloseViewClientPopup += HandlePopupClosed;
		PopupService.OnCloseCreateClientPopup += HandlePopupClosed;
	}

	private async Task LoadClients()
	{
		var response = await ClientService.GetClientsAsync(currentPage, pageSize);

		// Update the component state with data from the response
		clients = response.RowsData;
		totalCount = response.TotalCount;
		totalPages = response.TotalPages;
		hasPreviousPage = response.HasPreviousPage;
		hasNextPage = response.HasNextPage;

		// Debug pagination values
		Console.WriteLine($"Pagination Debug - TotalCount: {totalCount}, PageSize: {pageSize}, TotalPages: {totalPages}");
		Console.WriteLine($"Pagination Debug - HasPreviousPage: {hasPreviousPage}, HasNextPage: {hasNextPage}, CurrentPage: {currentPage}");

		// Use the page number from the response (in case it was adjusted on the server)
		currentPage = response.PageNumber;

		// Ensure current page is valid
		if (currentPage > totalPages && totalPages > 0)
		{
			currentPage = totalPages;
			await LoadClients();
		}

		Console.WriteLine($"Clients fetched: {clients?.Count}");
	}

	private async void HandlePopupClosed()
	{
		// Refresh the client list when the popup is closed
		await LoadClients();
		StateHasChanged();
	}

	private void OpenEditPopup(string? clientEmail)
	{
		if (clientEmail is null)
		{
			return;
		}
		Console.WriteLine($"Opening edit popup for client ID: {clientEmail}");

		// Use the popup service to show the edit popup
		PopupService.ShowEditClientPopup(clientEmail);
	}

	private void OpenViewPopup(string? clientEmail)
	{
		if (clientEmail is null)
		{
			return;
		}
		Console.WriteLine($"Opening view popup for client ID: {clientEmail}");

		// Use the popup service to show the view popup
		PopupService.ShowViewClientPopup(clientEmail);
	}

	private void OpenCreatePopup()
	{
		Console.WriteLine("Opening create client popup");

		// Use the popup service to show the create popup
		PopupService.ShowCreateClientPopup();
	}

	private async Task HandlePageChanged(int newPage)
	{
		currentPage = newPage;
		await LoadClients();
		Console.WriteLine($"Navigated to page: {currentPage}");
	}

	private async Task HandlePageSizeChanged(int newPageSize)
	{
		pageSize = newPageSize;
		await LoadClients();
		Console.WriteLine($"Changed page size to: {pageSize}");
	}

	public void Dispose()
	{
		try
		{
			// Unsubscribe from events when the component is disposed
			PopupService.OnCloseEditClientPopup -= HandlePopupClosed;
			PopupService.OnCloseViewClientPopup -= HandlePopupClosed;
			PopupService.OnCloseCreateClientPopup -= HandlePopupClosed;
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error during Dispose: {ex.Message}");
		}
	}
}
