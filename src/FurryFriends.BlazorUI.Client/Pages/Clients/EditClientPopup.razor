@using FurryFriends.BlazorUI.Client.Models.Clients
@using System.ComponentModel.DataAnnotations
@using FurryFriends.BlazorUI.Client.Services.Interfaces
@using FurryFriends.BlazorUI.Client.Components.Common
@inject IClientService ClientService
@inject IJSRuntime JS
@rendermode InteractiveAuto

<div class="modal-backdrop" style="display: block; background-color: rgba(0,0,0,0.5); position: fixed; top: 0; left: 0; right: 0; bottom: 0; z-index: 1000;">
	<div class="modal-dialog" style="position: relative; width: auto; margin: 1.25rem auto; max-width: 1200px; z-index: 1050;">
		<div class="modal-content" style="background-color: white; border-radius: 0.3rem; box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.15);">
			<div class="modal-header modal-header-background" style="display: flex; align-items: center; justify-content: space-between; padding: 1rem; border-bottom: 1px solid #dee2e6;">
				<h5 class="modal-title">Edit Client</h5>
				<button type="button" class="close" @onclick="OnCancel" style="background: none; border: none; font-size: 1.5rem; font-weight: 700; cursor: pointer;">&times;</button>
			</div>
			<div class="modal-body" style="padding: 1rem;">
				@if (isLoading)
				{
					<div style="text-align: center; padding: 20px;">
						<p><em>Loading client data...</em></p>
					</div>
				}
				else if (loadError != null)
				{
					<div style="color: red; padding: 20px;">
						<p>Error: @loadError</p>
					</div>
				}
				else if (clientModel != null)
				{
					<div class="edit-client-layout">
						<div class="client-form-section">
							<ClientForm
							ClientModel="clientModel"
							OnSubmit="HandleValidSubmit"
							OnCancel="OnCancel"
							FormName="EditClient"
							SubmitButtonText="Save Client"
							ButtonContainerClass="modal-footer"
							CancelButtonStyle="margin-right: 0.5rem;" />
						</div>
						<PetsDisplay
							Pets="clientPets"
							IsLoading="isPetsLoading"
							ClientEmail="ClientEmail"
							OnAddPet="HandleAddPet" />
					</div>
				}
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public string ClientEmail { get; set; } = default!;

	[Parameter]
	public EventCallback OnSave { get; set; }

	[Parameter]
	public EventCallback OnCancel { get; set; }

	private ClientModel clientModel = new();
	private Pet[]? clientPets;
	private bool isLoading = true;
	private bool isPetsLoading = true;
	private string? loadError = null;

	protected override async Task OnInitializedAsync()
	{
		await LoadClientData();
	}

	private async Task LoadClientData()
	{
		try
		{
			isLoading = true;
			isPetsLoading = true;
			loadError = null;

			// Get client model by ID from the service
			var client = await ClientService.GetClientByEmailAsync(ClientEmail);

			if (!client.Success || client.Data == null)
			{
				loadError = "Client not found";
			}
			else
			{
				clientModel = ClientData.MapToModel(client.Data);
				isLoading = false;
				StateHasChanged();

				// Load pets separately to allow the client form to display while pets are loading
				try
				{
					clientPets = client.Data.Pets;
					if (clientPets != null)
					{
						foreach (var pet in clientPets)
						{
							pet.Photo = await ClientService.GetDogImageAsync();
						}
					}
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Error loading pet images: {ex}");
					// We don't set loadError here since the client data loaded successfully
				}
				finally
				{
					isPetsLoading = false;
					StateHasChanged();
				}
			}
		}
		catch (Exception ex)
		{
			loadError = ex.Message;
			Console.WriteLine($"Error loading client: {ex}");
		}
		finally
		{
			isLoading = false;
			isPetsLoading = false;
			StateHasChanged();
		}
	}

	private async Task HandleValidSubmit()
	{
		if (clientModel != null)
		{
			ClientRequestDto clientRequest = ClientModel.MapToRequest(clientModel);
			await ClientService.UpdateClientAsync(clientRequest);
			await OnSave.InvokeAsync();
		}
	}

	[Parameter]
	public EventCallback<Guid> OnAddPet { get; set; }

	// Handle the add pet request from the PetsDisplay component
	private async Task HandleAddPet(string clientEmail)
	{
		// If the client has an ID, we can use it to add a pet
		if (clientModel != null && !string.IsNullOrEmpty(clientEmail))
		{
			// For now, we'll just show a JavaScript alert
			// In a real implementation, you would navigate to a pet creation form or show a popup
			await JS.InvokeVoidAsync("alert", $"Add a new pet for client {clientEmail}. This would open a pet creation form.");

			// If you have a dedicated pet creation component, you could invoke it here
			// await OnAddPet.InvokeAsync(clientData.Id);
		}
	}
}
